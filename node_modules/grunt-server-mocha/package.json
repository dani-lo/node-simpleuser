{
  "_args": [
    [
      "grunt-server-mocha",
      "/Users/dani/mode-my-modz/simpleuser"
    ]
  ],
  "_from": "grunt-server-mocha@*",
  "_id": "grunt-server-mocha@0.1.1",
  "_inCache": true,
  "_location": "/grunt-server-mocha",
  "_npmUser": {
    "email": "jeff.carnegie@gmail.com",
    "name": "jcarnegie"
  },
  "_npmVersion": "1.2.30",
  "_phantomChildren": {},
  "_requested": {
    "name": "grunt-server-mocha",
    "raw": "grunt-server-mocha",
    "rawSpec": "",
    "scope": null,
    "spec": "*",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/grunt-server-mocha/-/grunt-server-mocha-0.1.1.tgz",
  "_shasum": "269ecaea08628468ec5ba3e3aac534e2aea90764",
  "_shrinkwrap": null,
  "_spec": "grunt-server-mocha",
  "_where": "/Users/dani/mode-my-modz/simpleuser",
  "author": {
    "email": "jeff.carnegie@gmail.com",
    "name": "Jeff Carnegie"
  },
  "bugs": {
    "url": "https://github.com/jcarnegie/grunt-server-mocha/issues"
  },
  "contributors": [
    {
      "name": "Josh Davis",
      "email": "josh@joshldavis.com"
    }
  ],
  "dependencies": {
    "mocha": "~1.11"
  },
  "description": "A Grunt plugin for running server-side Mocha tests.",
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-coffee": "*",
    "grunt-contrib-jshint": "~0.5.4",
    "should": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "269ecaea08628468ec5ba3e3aac534e2aea90764",
    "tarball": "http://registry.npmjs.org/grunt-server-mocha/-/grunt-server-mocha-0.1.1.tgz"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "homepage": "https://github.com/jcarnegie/grunt-server-mocha",
  "installable": true,
  "keywords": [
    "bdd",
    "gruntplugin",
    "mocha",
    "requirejs",
    "server",
    "tdd",
    "tests"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/jcarnegie/grunt-server-mocha/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "maintainers": [
    {
      "name": "jcarnegie",
      "email": "jeff.carnegie@gmail.com"
    }
  ],
  "name": "grunt-server-mocha",
  "optionalDependencies": {},
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "readme": "# grunt-server-mocha\n\n> A Grunt plugin for running server-side Mocha tests.\n> This is a fork of Josh Davis's [grunt-cafe-mocha](https://github.com/jdavis/grunt-cafe-mocha)\n> plugin that's been translated into CoffeeScript and\n> supports testing RequireJS modules.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-server-mocha --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-server-mocha');\n```\n\n## The \"mocha\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `mocha` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  \"mocha-server\": {\n    testThis: {\n        src: 'test/this/**/*.js',\n        options: {\n            ui: 'bdd',\n            require: [\n                'should',\n            ],\n        },\n    },\n\n    /// Any number of tests here...\n\n    testThat: {\n        src: 'test/that/*.js',\n        options: {\n            ui: 'tdd',\n            growl: true,\n            reporter: 'nyan',\n        },\n    },\n\n    testRequireJS: {\n        src: 'test/rjs/**/*.test.js',\n        options: {\n            rjsConfig: {\n                baseUrl: \"./src\",\n                paths: {\n                    foo: \"bar/v1.0\"\n                }\n            }\n        }\n    }\n  },\n})\n```\n\n### Options\n\n#### options.require\nType: `List`\n\nDefault value: `[]`\n\nA list of modules to load before running the tests.\n\n#### options.reporter\nType: `String`\n\nDefault value: `'list'`\n\nA string value to pick which reporter to use when testing. To see a list of all\nthe reporters, check [here](http://visionmedia.github.com/mocha/#reporters).\n\nIf using the reporter `html-cov` or `json-cov`, take a special look at the\n[coverage][coverage] option.\n\n[coverage]: #optionscoverage\n\n#### options.ui\nType: `String`\n\nDefault value: `'bdd'`\n\nA string value to pick which type of user-interface to use. The options are\n`bdd`, `tdd`, or `exports`. Read more about interfaces\n[here](http://visionmedia.github.com/mocha/#interfaces).\n\n#### options.grep\nType: `String` to be turned into a `RegExp`\n\nDefault value: `.*`\n\nA string value to run tests that only match the given pattern. For example, if\nthe Mocha test file has the tests: `test1`, `test2`, `test3`, `test4`, if\n`options.grep = 'test[12]'`, it will only match the first two tests and run\nthem.\n\n#### options.invert\nType: `Boolean`\n\nDefault value: `false`\n\nEither `true` or `false` that will either match invert the matching. Using the\nexample from the section for **options.grep**, setting this option to `true`\nwould result in the *last* two tests being ran, but not the first two.\n\n#### options.timeout\nType: `Integer`\n\nDefault value: `2000`\n\nThe tiemout time for a test-case in milliseconds.\n\n#### options.slow\nType: `Integer`\n\nDefault value: `2000`\n\nThreshold for a \"slow\" test in milliseconds.\n\n#### options.colors\nType: `Boolean`\n\nDefault value: `undefined`\n\nTrue forces the enabling of colors while false forces the disabling of colors.\n\n#### options.growl\nType: `Boolean`\n\nDefault value: `false`\n\nEnable Growl/OS X (10.8) notification system on test completion.\n\n#### options.bail\nType: `Boolean`\n\nDefault value: `false`\n\nBail after the first test failure.\n\n#### options.globals\nType: `List`\n\nDefault value: `[]`\n\nA list of globals names.\n\n#### options.ignoreLeaks\nType: `Boolean`\n\nDefault value: `false`\n\nIgnore global variable leaks\n\n#### options.coverage\nType: `Boolean` | `Object`\n\nDefault value: `false`\n\nTurns on the coverage feature. If `options.coverage` is set to `true`, the\nfollowing defaults are used:\n\n```js\n{\n    output: 'coverage.html',\n    env: 'COV'\n}\n```\n\nTo override the defaults, just pass in an object like so:\n\n```js\ncoverage: {\n    output: 'coverageTwo.html',\n    env: 'ENHANCED_COVERAGE',\n}\n```\n\nThe `output` option is a path to where the coverage output will be saved to.\n\nThe `env` option is the name of the `process.env` variable to set to a truthy\nvalue. For example, if `coverage.env = 'ENHANCED_COVERAGE'` then in your\nproject, `process.env['ENHANCED_COVERAGE']` will be truthy.\n\nCheck out the [Coverage Example][example] for more details.\n\n[example]: #coverage-example\n\n#### options.rjsConfig\nType: `Object`\n\nDefault value: `{}`\n\nIf specified, will use the given RequireJS configuration to load the test files\npicked up in the src paths as RequireJS modules.\n\n### Usage Examples\n\n#### Basic Behavioral-driven Development\n\n```js\ngrunt.initConfig({\n  \"mocha-server\": {\n    src: 'test/**/*.js',\n    options: {\n        ui: 'bdd',\n    },\n  },\n})\n```\n\n#### Basic Test-driven Development\n\n```js\ngrunt.initConfig({\n    \"mocha-server\": {\n        src: 'test/**/*.js',\n        options: {\n            ui: 'tdd',\n        },\n    },\n});\n```\n\n#### Require More Modules\n\n```js\ngrunt.initConfig({\n    \"mocha-server\": {\n        options: {\n            require: ['should', 'something', 'else', 'here'];\n        },\n        src: 'test/**/*.js'\n    },\n});\n```\n\n#### More Tests\n\n```js\ngrunt.initConfig({\n    \"mocha-server\": {\n        foo: {\n            src: 'test/foo/*.js',\n            options: {\n                ui: 'tdd',\n            },\n        },\n\n        bar: {\n            src: 'test/bar/*.js',\n            options: {\n                ui: 'bdd',\n            },\n        },\n    },\n});\n```\n\n#### Coverage Example\n\nThe complete example of this is included in the [example/](example/) directory.\n\n```js\ngrunt.initConfig({\n    \"mocha-server\": {\n        // Setting 'coverage' option to true, using defaults\n        coverageOne: {\n            src: 'test/*.js',\n            options: {\n                ui: 'bdd',\n                reporter: 'html-cov',\n                coverage: true,\n                require: [\n                    'should',\n                ],\n            },\n        },\n\n        // Setting 'coverage' option to an object, overriding defaults\n        coverageTwo: {\n            src: 'test/*.js',\n            options: {\n                ui: 'bdd',\n                reporter: 'html-cov',\n                coverage: {\n                    output: 'coverageTwo.html',\n                    env: 'ENHANCED_COVERAGE',\n                },\n                require: [\n                    'should',\n                ],\n            },\n        }\n    },\n});\n```\n\n## Contributing\nFeel free to fork it and add as you please. If you add a particularly nice\nfeature, send me a pull request. I'd love to improve it.\n\n### Todo List\n* Support the `--compilers` option in Mocha\n* Support the watching of files for changes\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/jcarnegie/grunt-server-mocha.git"
  },
  "scripts": {
    "test": "grunt test"
  },
  "version": "0.1.1"
}
